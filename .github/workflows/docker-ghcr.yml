name: Build & Deploy Backend

on:
  push:
    branches: ["main"]
    tags: ["v*", "release-*"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

concurrency:
  group: backend-prod
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_REPO: algovisiondh/algovision-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & Test (generate REST Docs)
        run: ./mvnw clean test package -Dmaven.test.failure.ignore=true -Dspring.profiles.active=prod

      - name: Upload REST Docs (HTML + snippets)
        uses: actions/upload-artifact@v4
        with:
          name: rest-docs
          path: |
            target/generated-docs
            target/generated-snippets
            
      - name: Deploy REST Docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/generated-docs

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ env.IMAGE_REPO }}:latest
            ghcr.io/${{ env.IMAGE_REPO }}:sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    name: Deploy to backend server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: SSH | Pull & Run container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="ghcr.io/${{ env.IMAGE_REPO }}"
            SHA_TAG="sha-${{ github.sha }}"
            REMOTE_DIR="/home/ubuntu/docker/backend"
            COMPOSE_FILE="compose.yml"

            echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || true
            cd "$REMOTE_DIR"

            sed -i "s#ghcr.io/.*/.*:sha-.*#${IMAGE}:${SHA_TAG}#g" "$COMPOSE_FILE"
            docker compose -f "$COMPOSE_FILE" pull
            docker compose --env-file ../.env -f "$COMPOSE_FILE" up -d --wait

            # 헬스체크
            curl -fsS http://localhost:8080/actuator/health > /dev/null

            # dangling 이미지 정리
            docker image prune -f
